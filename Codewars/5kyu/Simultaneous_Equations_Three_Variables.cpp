int* solveEq(int eq1[3][4]){
	double base_D = eq1[0][0] * eq1[1][1] * eq1[2][2] + eq1[1][0] * eq1[2][1] * eq1[0][2] + eq1[2][0] * eq1[0][1] * eq1[1][2];//计算行列式 
	base_D = base_D - (eq1[0][2] * eq1[1][1] * eq1[2][0] + eq1[0][0] * eq1[1][2] * eq1[2][1] + eq1[0][1] * eq1[1][0] * eq1[2][2]);
	double x_D, y_D, z_D;

	if (base_D != 0) {
		x_D = eq1[0][3] * eq1[1][1] * eq1[2][2] + eq1[1][3] * eq1[2][1] * eq1[0][2] + eq1[2][3] * eq1[0][1] * eq1[1][2];
		x_D = x_D - (eq1[0][2] * eq1[1][1] * eq1[2][3] + eq1[0][3] * eq1[1][2] * eq1[2][1] + eq1[0][1] * eq1[1][3] * eq1[2][2]);
		y_D = eq1[0][0] * eq1[1][3] * eq1[2][2] + eq1[1][0] * eq1[2][3] * eq1[0][2] + eq1[2][0] * eq1[0][3] * eq1[1][2];
		y_D = y_D - (eq1[0][2] * eq1[1][3] * eq1[2][0] + eq1[0][0] * eq1[1][2] * eq1[2][3] + eq1[0][3] * eq1[1][0] * eq1[2][2]);
		z_D = eq1[0][0] * eq1[1][1] * eq1[2][3] + eq1[1][0] * eq1[2][1] * eq1[0][3] + eq1[2][0] * eq1[0][1] * eq1[1][3];
		z_D = z_D - (eq1[0][3] * eq1[1][1] * eq1[2][0] + eq1[0][0] * eq1[1][3] * eq1[2][1] + eq1[0][1] * eq1[1][0] * eq1[2][3]);
	}
  static int sum[3] = {0};
	sum[0] = x_D / base_D;
	sum[1] = y_D / base_D;
	sum[2] = z_D / base_D;

  return sum;
}